include:
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'

variables:
   VERSION: 1.0.${CI_PIPELINE_ID}

stages:
   - build
   - release
   - deploy
#   - report

   

#before_script:
#  #устанавливаем ssh-agent для удобства аутентификации по ssh
#  - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
#  - eval $(ssh-agent -s)
#  #сохраняем сгенеренный ранее приватный ключ для раннера
#  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
#  - mkdir -p ~/.ssh
#  - chmod 600 ~/.ssh
#  - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
#  - chmod 644 ~/.ssh/known_hosts

build:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd frontend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA


release:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA
    # если образ прошел проверки в CI (сканирование, тесты и т.д), то тегаем latest
    - docker tag $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/sausage-frontend:latest
    - docker push $CI_REGISTRY_IMAGE/sausage-frontend:latest



deploy:
  stage: deploy
  image: alpine:3.15.0
  # если хотим сделать деплой по кнопке
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
#       when: manual
#     - if: '$CI_COMMIT_BRANCH == "master"'
#       when: manual
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo "$SSH_PRIVATE_KEY"
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh ${DEV_USER}@${DEV_HOST} "id"
    - scp ./frontend/deployfront.sh ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/deployfront.sh
    - ssh ${DEV_USER}@${DEV_HOST}
      "export "VERSION=${VERSION}";
       export "CI_REGISTRY_USER=${CI_REGISTRY_USER}";
       export "CI_REGISTRY_PASSWORD=${CI_REGISTRY_PASSWORD}";
       export "CI_REGISTRY=${CI_REGISTRY}";setsid /bin/bash  " /home/student/deployfront.sh



#sonarqube-frontend-sast:
#  stage: test
#  before_script: []
#  image:
#    name: sonarsource/sonar-scanner-cli:latest
#    entrypoint: [""]  
#  script:
#    - cd frontend
#    - sonar-scanner
#      -Dsonar.qualitygate.wait=true 
#      -Dsonar.projectKey=$PROJECTKEY2
#      -Dsonar.sources=.
#      -Dsonar.host.url=$HOST
#      -Dsonar.login=$LOGIN2  
#  allow_failure: true

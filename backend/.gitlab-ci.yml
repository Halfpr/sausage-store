include:
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'


variables:
   VERSION: 1.0.${CI_PIPELINE_ID}
   MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
   JAVA_OPTS: -XX:MaxRAMPercentage=90

#before_script:
  #устанавливаем ssh-agent для удобства аутентификации по ssh
#   - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
#   - eval $(ssh-agent -s)
#  #сохраняем сгенеренный ранее приватный ключ для раннера
#   - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
#   - mkdir -p ~/.ssh
#   - chmod 600 ~/.ssh
#   - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
#   - chmod 644 ~/.ssh/known_hosts

stages:
   - build
   - test
   - release
   - deploy
 #  - report


build-backend-code-job:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd backend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA
      .
- docker push $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA

sonarqube-backend-sast:
  stage: test
  image: maven:3.8-openjdk-16
  script:
    - cd backend  
    - mvn verify sonar:sonar 
        -Dsonar.qualitygate.wait=true
        -Dsonar.projectKey=$PROJECTKEY
        -Dsonar.host.url=$HOST
        -Dsonar.login=$LOGIN
  allow_failure: true

release:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA
    # если образ прошел проверки в CI (сканирование, тесты и т.д), то тегаем latest
    - docker tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/sausage-backend:latest
    - docker push $CI_REGISTRY_IMAGE/sausage-backend:latest


  
deploy:
  stage: deploy
  image: alpine:3.15.0
  # если хотим сделать деплой по кнопке
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
#       when: manual
#     - if: '$CI_COMMIT_BRANCH == "master"'
#       when: manual
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$DEPLOY_USER_SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo "$DEPLOY_USER_SSH_PRIVATE_KEY"
    - echo "$DEPLOY_SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
      - ssh ${DEV_USER}@${DEV_HOST} "id"
      - scp ./backend/sausage-store-backend.service ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/sausage-store-backend.service
      - scp ./backend/deployback.sh ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/deployback.sh
      - ssh -v ${DEV_USER}@${DEV_HOST} "export "PSQL_HOST=${PSQL_HOST}"; export "PSQL_PORT=${PSQL_PORT}"; export "PSQL_DBNAME=${PSQL_DBNAME}"; export "PSQL_USER=${PSQL_USER}"; export "PSQL_PASSWORD=${PSQL_PASSWORD}; export "MONGO_DATA=${MONGO_DATA}"; export "CURRENT_VERSION=${VERSION}"; export "VERSION=${VERSION}"; export "DEV_HOST=${DEV_HOST}";export "NEXUS_REPO_URL=${NEXUS_REPO_URL}"; export "NEXUS_REPO_USER=${NEXUS_REPO_USER}"; export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}; export "CI_REGISTRY_USER=${CI_REGISTRY_USER}"; export "CI_REGISTRY_PASSWORD=${CI_REGISTRY_PASSWORD}";export "CI_REGISTRY=${CI_REGISTRY}"; setsid /bin/bash  " /home/student/deployback.sh




#   environment:
#      name: backend/$CI_COMMIT_REF_SLUG
#      url: http://std-015-31.praktikum-services.tech/
#   when: manual

#send-report: #задача настройка уведомлений
#   stage: report #этап report
#   script: #запуск скрипта    
#    - > #Настройка уведомлений
#      curl -X POST -H 'Content-type: application/json' --data '{"chat_id": "-1001657575944","text":"Вышла новая версия сосичной - '"${VERSION}#"'\nСкачать Backend можно по ссылке - <https://nexus.k8s.praktikum-services.tech/repository/sausage-store-amrakhov-anar-backend/com/yandex/#practicum/devops/sausage-store/'"${VERSION}"'/sausage-store-'"${VERSION}"'.jar"}' https://api.telegram.org/#bot5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs/sendMessage
#

include:
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'


variables:
   VERSION: 1.0.${CI_PIPELINE_ID}
   MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
   JAVA_OPTS: -XX:MaxRAMPercentage=90

#before_script:
  #устанавливаем ssh-agent для удобства аутентификации по ssh
#   - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
#   - eval $(ssh-agent -s)
#  #сохраняем сгенеренный ранее приватный ключ для раннера
#   - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
#   - mkdir -p ~/.ssh
#   - chmod 600 ~/.ssh
#   - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
#   - chmod 644 ~/.ssh/known_hosts

stages:
   - build-code
   - build-docker
   - test
   - release
#  - report

build-backend-report:
   stage: build-code
  
   script:
     - cd backend-report
     - mvn package -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository -Dversion.application=${VERSION}

   rules:
      - changes:
           - backend-report/**/*
   artifacts:
     paths:
       - backend-report/target/sausage-store-report-1.0.0.jar
       - ${CI_PROJECT_DIR}/.m2/

build-backend-report-docker:
  dependencies:
    - build-backend-report
  stage: build-docker
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cp backend-report/target/sausage-store-report-1.0.0.jar backend-report/
    - cd backend-report
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/sausage-backend-report:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/sausage-backend-report:$CI_COMMIT_SHA

sonarqube-backend-sast:
  stage: test
  image: maven:3.8-openjdk-16

  script:
    - cd backend-report  
    - mvn verify sonar:sonar 
        -Dsonar.qualitygate.wait=true
        -Dsonar.projectKey=$PROJECTKEY
        -Dsonar.host.url=$HOST
        -Dsonar.login=$LOGIN
  allow_failure: true

release:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/sausage-backend-report:$CI_COMMIT_SHA
    # если образ прошел проверки в CI (сканирование, тесты и т.д), то тегаем latest
    - docker tag $CI_REGISTRY_IMAGE/sausage-backend-report:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/sausage-backend-report:latest
    - docker push $CI_REGISTRY_IMAGE/sausage-backend-report:latest

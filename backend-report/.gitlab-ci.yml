include:
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'

variables:
   VERSION: 1.0.${CI_PIPELINE_ID}
   MAVEN_REPO_PATH: ./.m2/repository
   JAVA_OPTS: -XX:MaxRAMPercentage=90

stages:
   - build
   - test
   - release
   - deploy

build-backend-report:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd backend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/sausage-backend-report:$CI_COMMIT_SHA
      .
- docker push $CI_REGISTRY_IMAGE/sausage-backend-report:$CI_COMMIT_SHA

sonarqube-backend-report-test:
  stage: test
  image: maven:3.8-openjdk-16
  script:
     - echo "${SONARQUBE_URL}...${SONARQUBE_TOKEN_BACKEND_REPORT}"
     - cd backend
     - mvn install -Dmaven.repo.local=${SONARQUBE_SOURCE_BACKEND_REPORT} -Dversion.application=${VERSION}
     - mvn verify sonar:sonar
       -Dsonar.projectName=${SONARQUBE_PROJECT_NAME_BACKEND_REPORT}
       -Dsonar.projectKey=${SONARQUBE_PROJECT_KEY_BACKEND_REPORT}
       -Dsonar.sources=${SONARQUBE_SOURCE_BACKEND_REPORT}
       -Dsonar.host.url=${SONARQUBE_URL}
       -Dsonar.login=${SONARQUBE_TOKEN_BACKEND_REPORT}
       -Dsonar.qualitygate.wait=true

upload-backend-report-latest:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/sausage-backend-report:$CI_COMMIT_SHA
    # если образ прошел проверки в CI (сканирование, тесты и т.д), то тегаем latest
    - docker tag $CI_REGISTRY_IMAGE/sausage-backend-report:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/sausage-backend-report:latest
    - docker push $CI_REGISTRY_IMAGE/sausage-backend-report:latest

deploy-backend-report:
  stage: deploy
  image: alpine:3.15.0
  ## если хотим сделать деплой по кнопке
# #  rules:
#     - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
#       when: manual
#     - if: '$CI_COMMIT_BRANCH == "master"'
#       when: manual
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$DEPLOY_USER_SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo "$DEPLOY_USER_SSH_PRIVATE_KEY"
    - echo "$DEPLOY_SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - scp ./docker-compose.yml ${DEPLOY_USER}@${DEPLOY_HOST}:/home/${DEPLOY_USER}/
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST}
      "export "VERSION=${VERSION}";
       export "SPRING_DATA_MONGODB_URI=${MONGO_DATA}";
       export "CI_REGISTRY_USER=${CI_REGISTRY_USER}";
       export "CI_REGISTRY_PASSWORD=${CI_REGISTRY_PASSWORD}";
       export "CI_REGISTRY=${CI_REGISTRY}";
       export "VAULT_TOKEN=${VAULT_TOKEN}";
      /bin/bash -s " < ./backend-report/deploy.sh
